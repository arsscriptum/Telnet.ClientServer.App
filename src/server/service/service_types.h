
//==============================================================================
//
//   service_types.h 
//
//==============================================================================
//  arsscriptum - made in quebec 2020 <guillaumeplante.qc@gmail.com>
//==============================================================================


#ifndef __SERVICE_TYPES_H__
#define __SERVICE_TYPES_H__

#include "enum_to_string.h"


#ifdef __cplusplus
extern "C" {
#endif


#define GENERATE_ENUM_STRINGS  // Start string generation

	/*
typedef enum _mps_agent_version_t
{
	RECON_AGENT_VERSION_1_0 = CORE_MAKE_VERSION(1, 0),                // version 1.0
	RECON_AGENT_VERSION_1_1 = CORE_MAKE_VERSION(1, 1),                // version 1.1
	RECON_AGENT_VERSION_1_2 = CORE_MAKE_VERSION(1, 2),                // version 1.2
	RECON_AGENT_VERSION_CURRENT = CORE_MAKE_VERSION(1, 2),    // latest known version
} mps_agent_version_t;
*/

	BEGIN_ENUM(RECON_ERRORS)
	{
		DECL_ENUM_ELEMENT(RECON_NO_ERROR)		//  0
			, DECL_ENUM_ELEMENT(RECON_ERROR_START)	// -1
	}
	END_ENUM(RECON_ERRORS)

		BEGIN_ENUM(RECON_CONTROL)
	{
		DECL_ENUM_ELEMENT(RECON_CONTROL_UNKNOWN)
			, DECL_ENUM_ELEMENT(RECON_CONTROL_STOP)
			, DECL_ENUM_ELEMENT(RECON_CONTROL_PAUSE)
			, DECL_ENUM_ELEMENT(RECON_CONTROL_CONTINUE)
			, DECL_ENUM_ELEMENT(RECON_CONTROL_INTERROGATE)
			, DECL_ENUM_ELEMENT(RECON_CONTROL_SHUTDOWN)
			, DECL_ENUM_ELEMENT(RECON_CONTROL_PARAMCHANGE)
			, DECL_ENUM_ELEMENT(RECON_CONTROL_NETBINDADD)
			, DECL_ENUM_ELEMENT(RECON_CONTROL_NETBINDREMOVE)
			, DECL_ENUM_ELEMENT(RECON_CONTROL_NETBINDENABLE)
			, DECL_ENUM_ELEMENT(RECON_CONTROL_NETBINDDISABLE)
			, DECL_ENUM_ELEMENT(RECON_CONTROL_DEVICEEVENT)
			, DECL_ENUM_ELEMENT(RECON_CONTROL_HARDWAREPROFILECHANGE)
			, DECL_ENUM_ELEMENT(RECON_CONTROL_POWEREVENT)
			, DECL_ENUM_ELEMENT(RECON_CONTROL_SESSIONCHANGE)
			, DECL_ENUM_ELEMENT(RECON_CONTROL_PRESHUTDOWN)
			, DECL_ENUM_ELEMENT(RECON_CONTROL_CTRL_BREAK)
			, DECL_ENUM_ELEMENT(RECON_CONTROL_CTRL_C)
			, DECL_ENUM_ELEMENT(RECON_CONTROL_CTRL_CLOSE)
			, DECL_ENUM_ELEMENT(RECON_CONTROL_CTRL_LOGOFF)
			, DECL_ENUM_ELEMENT(RECON_CONTROL_CTRL_SHUTDOWN)
			, DECL_ENUM_ELEMENT(RECON_CONTROL_CTRL_UNKNOWN)
	}
	END_ENUM(RECON_CONTROL)


		enum RECON_CURRENT_STATES {
		RECON_CURRENT_STATE_UNKNOWN = 0x00000000
		, RECON_CURRENT_STATE_STOPPED = 0x00000001
		, RECON_CURRENT_STATE_START_PENDING = 0x00000002
		, RECON_CURRENT_STATE_STOP_PENDING = 0x00000003
		, RECON_CURRENT_STATE_RUNNING = 0x00000004
		, RECON_CURRENT_STATE_CONTINUE_PENDING = 0x00000005
		, RECON_CURRENT_STATE_PAUSE_PENDING = 0x00000006
		, RECON_CURRENT_STATE_PAUSED = 0x00000007
	};

	enum RECON_ACCEPTED_CONTROLS {
		RECON_ACCEPTED_CONTROL_NONE = 0x00000000
		, RECON_ACCEPTED_CONTROL_STOP = 0x00000001
		, RECON_ACCEPTED_CONTROL_PAUSE_CONTINUE = 0x00000002
		, RECON_ACCEPTED_CONTROL_SHUTDOWN = 0x00000004
		, RECON_ACCEPTED_CONTROL_PARAMCHANGE = 0x00000008
		, RECON_ACCEPTED_CONTROL_NETBINDCHANGE = 0x00000010
		, RECON_ACCEPTED_CONTROL_HARDWAREPROFILECHANGE = 0x00000020
		, RECON_ACCEPTED_CONTROL_POWEREVENT = 0x00000040
		, RECON_ACCEPTED_CONTROL_SESSIONCHANGE = 0x00000080
		, RECON_ACCEPTED_CONTROL_PRESHUTDOWN = 0x00000100
	};

	enum RECON_CUSTOM_MESSAGE {
		RECON_CONTROL_CTRL_USERDEFINED = 0x10000000
	};


	enum RECON_LOG_TYPES {
		RECON_LOG_SUCCESS
		, RECON_LOG_ERROR_TYPE
		, RECON_LOG_WARNING_TYPE
		, RECON_LOG_INFORMATION_TYPE
		, RECON_LOG_AUDIT_SUCCESS
		, RECON_LOG_AUDIT_FAILURE
	};

	enum RECON_EXECUTION_MODE {
		SC_MODE_BARE = 0
		, SC_MODE_OFFLINE_LOCAL_MONITOR
		, SC_MODE_SERVER
		, SC_MODE_TEST
	};

	typedef struct {
		RECON_CURRENT_STATES    CurrentState;
		RECON_ACCEPTED_CONTROLS AcceptedControls;
		long                      ExitCode;
		long                      BGPSpecificExitCode;
		long                      CheckPoint;
		long                      ExpectedTimeMillisecs;
	} RECON_STATUS;


	enum RECON_RETURN_CODES {
		RECON_RETURN_CODE_SUCCESS
		, RECON_RETURN_CODE_MINOR_ERROR
		, RECON_RETURN_CODE_DEBUGGER_DETECTED
	};

#undef GENERATE_ENUM_STRINGS   // Stop string generation 

#ifdef __cplusplus
}
#endif




#endif//__SERVICE_TYPES_H__